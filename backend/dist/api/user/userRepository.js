"use strict";var A=Object.create;var c=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,U=Object.prototype.hasOwnProperty;var x=(r,e)=>{for(var t in e)c(r,t,{get:e[t],enumerable:!0})},w=(r,e,t,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of P(e))!U.call(r,i)&&i!==t&&c(r,i,{get:()=>e[i],enumerable:!(o=N(e,i))||o.enumerable});return r};var _=(r,e,t)=>(t=r!=null?A(I(r)):{},w(e||!r||!r.__esModule?c(t,"default",{value:r,enumerable:!0}):t,r)),h=r=>w(c({},"__esModule",{value:!0}),r),s=(r,e,t,o)=>{for(var i=o>1?void 0:o?N(e,t):e,y=r.length-1,E;y>=0;y--)(E=r[y])&&(i=(o?E(e,t,i):E(i))||i);return o&&i&&c(e,t,i),i};var S={};x(S,{userRepository:()=>b});module.exports=h(S);var L=_(require("jssha")),p=r=>{let e=new L.default("SHA-256","TEXT",{encoding:"UTF8"});return e.update(r),e.getHash("HEX")};var f=async(r,e,t)=>{let o;return t?(o=await r.findOneBy({[t]:e[t]}).catch(i=>console.log("find by on",i)),o?r.merge(o,e):o=r.create(e)):o=r.create(e),await r.save(o)},g=async(r,e)=>{let t=r.create(e);return await r.insert(t)};var O=require("typeorm");var d=require("typeorm");var m=require("typeorm");var a=class{};s([(0,m.Column)("integer",{primary:!0,name:"id",generated:!0})],a.prototype,"id",2),s([(0,m.Column)("boolean",{name:"is_active",default:!0})],a.prototype,"is_active",2),s([(0,m.Column)("text",{name:"name",nullable:!1})],a.prototype,"name",2),s([(0,m.Column)("text",{name:"login",nullable:!1})],a.prototype,"login",2),s([(0,m.Column)("text",{name:"password",nullable:!1})],a.prototype,"password",2),s([(0,m.Column)("text",{name:"email",nullable:!0})],a.prototype,"email",2),s([(0,m.Column)("text",{name:"phone",nullable:!0})],a.prototype,"phone",2),s([(0,m.JoinColumn)({name:"role_id",referencedColumnName:"id"}),(0,m.ManyToOne)(()=>n,e=>e.users)],a.prototype,"role",2),a=s([(0,m.Entity)("user")],a);var n=class{};s([(0,d.Column)("integer",{primary:!0,name:"id"})],n.prototype,"id",2),s([(0,d.Column)("text",{name:"name"})],n.prototype,"name",2),s([(0,d.OneToMany)(()=>a,e=>e.role)],n.prototype,"users",2),n=s([(0,d.Entity)("role")],n);var u=class{constructor(){this.name="Initial1723140820802"}async up(e){await e.query('CREATE TABLE "user" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "is_active" boolean NOT NULL DEFAULT (1), "name" text NOT NULL, "login" text NOT NULL, "password" text NOT NULL, "email" text, "phone" text, "role_id" integer)'),await e.query('CREATE TABLE "role" ("id" integer PRIMARY KEY NOT NULL, "name" text NOT NULL)'),await e.query('CREATE TABLE "temporary_user" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "is_active" boolean NOT NULL DEFAULT (1), "name" text NOT NULL, "login" text NOT NULL, "password" text NOT NULL, "email" text, "phone" text, "role_id" integer, CONSTRAINT "FK_fb2e442d14add3cefbdf33c4561" FOREIGN KEY ("role_id") REFERENCES "role" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION)'),await e.query('INSERT INTO "temporary_user"("id", "is_active", "name", "login", "password", "email", "phone", "role_id") SELECT "id", "is_active", "name", "login", "password", "email", "phone", "role_id" FROM "user"'),await e.query('DROP TABLE "user"'),await e.query('ALTER TABLE "temporary_user" RENAME TO "user"')}async down(e){await e.query('ALTER TABLE "user" RENAME TO "temporary_user"'),await e.query('CREATE TABLE "user" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "is_active" boolean NOT NULL DEFAULT (1), "name" text NOT NULL, "login" text NOT NULL, "password" text NOT NULL, "email" text, "phone" text, "role_id" integer)'),await e.query('INSERT INTO "user"("id", "is_active", "name", "login", "password", "email", "phone", "role_id") SELECT "id", "is_active", "name", "login", "password", "email", "phone", "role_id" FROM "temporary_user"'),await e.query('DROP TABLE "temporary_user"'),await e.query('DROP TABLE "role"'),await e.query('DROP TABLE "user"')}};var T=class{constructor(){this.name="Data1723140820803"}async up(e){await e.query('INSERT INTO "role" (id, name) VALUES (1, "admin")'),await e.query('INSERT INTO "role" (id, name) VALUES (2, "manager")');let t=p("a"),o=p("a");await e.query('INSERT INTO "user" (name, login, password, role_id) VALUES ("\u0410\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0430\u0442\u043E\u0440", "admin", "'+t+'", 1)'),await e.query('INSERT INTO "user" (name, login, password, role_id, email, phone) VALUES ("\u041C\u0435\u043D\u0435\u0434\u0436\u0435\u0440", "manager", "'+o+'", 2, "email@email.ru", "+79511239342")')}async down(e){await e.query('DELETE FROM "role"'),await e.query('DELETE FROM "user"')}};var R=new O.DataSource({name:"cp",type:"sqlite",database:"db/main.sqlite",synchronize:!1,migrations:[u,T],entities:[a,n]});var l=r=>R.getRepository(r),b={findRoles:async()=>l(n).find({order:{id:"asc"}}),findAll:async()=>l(a).find({order:{id:"desc"},relations:["role"]}),findById:async r=>await l(a).findOne({where:{id:r},relations:["role"]}).catch(o=>console.log("findById",o))??null,findByLoginPassword:async r=>await l(a).findOne({where:r,relations:["role"]}).catch(o=>console.log("findByLoginPassword",o))??null,delete:async r=>{let t=await l(a).delete({id:r}).catch(o=>console.log("delete",o));return!!t?.affected&&t?.affected>0},add:async r=>{let e=l(a);if(await e.findOne({where:{login:r.login}})!==null)return!1;let o={...r,role:await l(n).findOneBy({id:r.role_id})};return o.password=p(r.password),await g(e,o)},update:async(r,e)=>{let t=l(a),o={...e,id:r,role:await l(n).findOneBy({id:e.role_id})};return o.password&&o.password!=="*"?o.password=p(o.password):delete o.password,await f(t,o,"id")}};0&&(module.exports={userRepository});
